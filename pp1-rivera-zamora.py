# PracticoPython1
# https://unicode.org/emoji/charts/full-emoji-list.html ‚úÖ(1540)‚ö†Ô∏è(1430)‚è≥(990)üì¶(1299)
# https://elcodigoascii.com.ar
# Matias Rivera Devia (20.654.829-0)
# Alexis Zamora Bernal (18.785.368-0)

import serial                   # Importa la biblioteca para manejar comunicaci√≥n serial
import time                     # Importa time para las esperas
import serial.tools.list_ports  # Importa subm√≥dulo de pyserial (no se importa automaticamente con pyserial)

class Ardu:
    def __init__(self, port: str = None, bauds: int = None, timeout: float = 1.0): # Constructor de la clase
        self.port = port            # Puerto serial (Ej: COM3)
        self.bauds = bauds          # Tasa de baudios (velocidad)
        self.timeout = timeout      # Tiempo de espera para lectura (segundos)
        self.serial = None          # Objeto que representa la conexi√≥n serial

    def open(self): # M√©todo para abrir la conexi√≥n al puerto serial
        try:
            self.serial = serial.Serial(self.port, self.bauds, timeout=self.timeout) # Intenta abrir el puerto serial con los par√°metros actuales
            print(f"‚úÖ Conectado a {self.port} a {self.bauds} baudios.") # Muestra por pantalla el puerto y la tasa de baudios

        except Exception as e: # Manejo de errores
            print("‚ö†Ô∏è Error al abrir el puerto serial:", e)
            self.serial = None

    def detectSerialPort(self): # M√©todo para detectar el puerto serial
        print("‚è≥ Buscando puertos seriales disponibles")
        ports = serial.tools.list_ports.comports() # lista de puertos disponibles
        for port in ports: # Recorre los puertos seriales disponibles en el sistema y los analiza uno por uno
            if "Arduino" in port.description or "CH340" in port.description:
                """
                Buscara y seleccionara el puerto con Arduino o CH340 en la descripci√≥n del dispositivo.
                Nota: Preferimos dejar el programa con esta selecci√≥n autom√°tica del puerto, ya que, al probar el programa en diferentes PC 
                cambiaba el puerto (p.EJ: COM3 al COM5) y la idea no es modificar el programa cada vez que se conecte a una nueva m√°quina
                """
                self.port = port.device # guarda el puerto detectado en el atributo del objeto
                print(f"‚úÖ Puerto detectado autom√°ticamente: {port.device} - {port.description}") # imprime por pantalla el puerto seleccionado
                return port.device # Devuelve el puerto que se va utilizar
        print("‚ö†Ô∏è No se encontr√≥ un puerto con un dispositivo Arduino") # En caso de NO detecci√≥n
        return None # M√©todo para detectar el puerto serial
    
    def detectBaudRate(self): # M√©todo para detecta la tasa de baudios
        print("‚è≥ Detectando baudios...")
        commonBaudRates = [300, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200]  # Lista de baudios para probar

        for baud in commonBaudRates: # Recorre los baudios en la lista
            try:
                self.serial = serial.Serial(self.port, baud, timeout=1.0) # Abre la conexi√≥n con el puerto serial usando los parametros obtenidos
                print(f"‚è≥ Probando {baud} baudios") # imprime por pantalla los baudios que se estan probando de la lista

                buffer = "" # Acumula caracteres ASCII hasta formar un byte hexadecimal (p.Ej: "7E")
                tempData = [] # Lista temporal para almacenar los bytes convertidos
                startTime = time.time() # Guarda el tiempo inicial para medir 2 segundos de prueba

                while time.time() - startTime < 2: # Mientras no hayan pasado m√°s de dos segundos:
                    if self.serial.in_waiting: # Verifica si hay datos disponibles en el puerto
                        char = self.serial.read().decode("ascii", errors="ignore") # Se lee un car√°cter ASCII
                        
                        if char == ' ': # Si hay un espacio se considera un byte terminado
                            if len(buffer) == 2: # Si hay dos caracteres acumulados (un byte hexadecimal p.Ej: 7E)
                                try:
                                    byte = int(buffer, 16) # Convierte el texto hexadecimal a entero
                                    tempData.append(byte) # Lo agrega a la lista temporal

                                    if len(tempData) == 8: # Cuando hay 8 bytes acumulados, se analiza como posible trama
                                        if tempData[0] == 0x7E and tempData[-1] == 0x7E: # Verifica que la trama empiece y termine con 0x7E
                                            crcCalc = self.crc16CcittFalse(tempData[1:5]) # Calcula el CRC de los 4 bytes centrales (tipo, id, query, dato)
                                            crcReceived = (tempData[5] << 8) | tempData[6] # Reconstruye el CRC recibido desde los bytes 5 y 6

                                            if crcCalc == crcReceived: # Si el CRC calculado y el recibido coinciden corresponde a la velocidad correcta (baudios)
                                                print(f"‚úÖ Tasa de baudios detecteda: {baud}")
                                                self.bauds = baud # Guarda la velocidad
                                                self.serial.close() # Cierra la conexi√≥n serial
                                                return baud # Devuelve la velocidad detectada (baud)
                                        tempData = [] # Si no era una trama v√°lida, reinicia la lista temporal
                                except ValueError:
                                    pass # Si el byte no era valor hexadecimal v√°lido es ignorado
                            buffer = "" # Reinicia el buffer de caracteres
                        else:
                            buffer += char # Acumula los caracteres que forman el byte

                self.serial.close() # Si no se detecto trama valida en 2 segundos se cierra la conexi√≥n

            except Exception as e: # Manejo de errores
                print(f"‚ö†Ô∏è Error de lectura {baud} baudios: {e}")

        print("‚ö†Ô∏è No se pudo detectar una tasa de baudios")
        return None # Devuelve None para indicar que fallo la conexi√≥n de baudios

    def connect(self): # M√©todo que automatiza la conexi√≥n con el arduino (detectando puerto y tasa de baudios) y empieza a leer los datos enviados por el arduino
        if not self.detectSerialPort(): # M√©todo para detectar el puerto autom√°ticamente, en caso de NO detectarlo entrara al if y lo pedira de forma manual al usuario
            print("‚ö†Ô∏è No se pudo detectar el puerto serial autom√°ticamente")
            manualPort = input("Ingresar el puerto manualmente (p.Ej: COM3 o /dev/ttyACM0):") # Solicita el puerto al usuario
            if manualPort.strip() == "": # En caso de que el usuario no ingrese ningun puerto (.strip() se utiliza para eliminar espacios en blanco)}
                print("‚ö†Ô∏è No se ingreso ningun puerto. Finalizando conexi√≥n...")
                return # Devuelve None, solo se quiere detener la ejecuci√≥n del flujo
            self.port = manualPort # Atributo del objeto, contiene el valor del puerto ingresado por el usuario
        if self.detectBaudRate(): # M√©todo para detectar la tasa de baudios
            self.open() # Se utiliza el m√©todo open para abrir la conexi√≥n del puerto serial
            self.readByte() # Se utiliza el m√©todo readByte para leer bytes del puerto serial, los transforma en datos √∫tiles que se muestran por pantalla y valida su integridad usando CRC
        else:
            print("‚ö†Ô∏è Fallo en establecer comunicaci√≥n con el Arduino")

    def crc16CcittFalse(self, bytesIn: list[int]) -> int: # M√©todo que simula c√≥mo el Arduino calcula el CRC, se utiliza para validar los datos recibidos
        crc = 0xFFFF # Valor inicial est√°ndar para CRC-16/CCITT-False
        for byte in bytesIn: # Para cada byte de entrada
            crc ^= byte << 8 # Aplica una operaci√≥n XOR con el CRC actual, para inyectar ese byte al proceso de calculo
            for _ in range(8): # Procesa 8 bits (1 Byte = 8 bits)
                if crc & 0x8000: # Verifica si el bit m√°s significativo del CRC (el bit 15 de 16) es 1
                    crc = (crc << 1) ^ 0x1021 # Desplaza el CRC una posici√≥n a la izquierda y hace un XOR con el polinomio 0x1021, que es el divisor del algoritmo CRC.
                else:
                    crc <<= 1 # Solo se desplaza a la izquierda, sin aplicar el polinomio al igual que en una divisi√≥n (si no se puede dividir, solo se baja el siguiente bit)
                crc &= 0xFFFF # Se asegura que el CRC quede en 16 bits
        return crc # Devuelve el resultado final

    def readByte(self): # M√©todo para leer datos del puerto serial byte por byte en formato hexadecimal, los convierte a n√∫meros y los agrupa en tramas de 8 bytes
        if self.serial is None:
            print("‚ö†Ô∏è Puerto no conectado.")
            return # Termina la ejecuci√≥n

        buffer = "" # Acumula caracteres hasta tener un byte completo
        try:
            while True:

                if self.serial.in_waiting: # Verifica si hay datos disponibles en el buffer de entrada              
                    char = self.serial.read().decode("ascii", errors="ignore") # Lee un solo car√°cter ASCII desde el puerto (como por ejemplo: "7", "E")
                    
                    if char == ' ': # Cuando llega un espacio "", significa que un byte termin√≥
                        if len(buffer) == 2: # Cada "palabra" es un byte en hexadecimal
                            
                            try:
                                byte = int(buffer, 16) # Convierte los 2 caracteres HEX (p.ej: 7E) a un valor entero
                                self.payloadByte(byte) # llama al metodo payloadByte: transforma bytes en datos √∫tiles y valida su integridad usando CRC

                            except ValueError:
                                print(f"‚ö†Ô∏è Byte inv√°lido: {buffer}")

                        buffer = "" # Limpia el buffer para el siguiente byte
                    else:
                        buffer += char # Acumula caracteres

        # Manejo de errores e interrupciones

        except KeyboardInterrupt:
            print("\nLectura interrumpida por el usuario.")
        except Exception as e:
            print("‚ö†Ô∏è Error durante la lectura:", e)
        finally:
            self.close() # Cierra la conexi√≥n serial

    def payloadByte(self, byte): # M√©todo para convertir bytes recibidos por serial en datos √∫tiles, legibles y validados
        """    
        1) Junta los bytes recibidos uno a uno hasta formar una trama de 8 bytes (verificando que empiece y termine con 0x7E)
        2) Extrae los datos importantes (tipo de dispositivo, id de dispositivo, valor del dato, etc)
        3) Calcula el CRC real con los datos del medio y lo compara con el recibido
        4) Imprime un mensaje legible, que indica el tipo de sensor, valor y si el checksum esta correcto o no
        """
        if not hasattr(self, 'payload'): # Crea el buffer si no existe
            self.payload = [] # Buffer

        self.payload.append(byte) # Agrega el nuevo byte al buffer

        # Se asegura de que se haya recibido solo 1 byte y que el primer byte de la trama sea 0x7E (inicio v√°lido), sino descarta todo y empieza una nueva trama
        if len(self.payload) == 1 and self.payload[0] != 0x7E:
            self.payload = [] # Buffer
            return # Termina la ejecuci√≥n

        # Si ya hay m√°s de un byte, pero si no hay 0x7E al principio, tambi√©n descartara la trama
        if len(self.payload) > 1 and self.payload[0] != 0x7E:
            print("Ignorado: no comienza con 0x7E")
            self.payload = [] # Buffer
            return # Termina la ejecuci√≥n

        if len(self.payload) == 8: # Comprobando el largo de la trama (8 bytes, p.Ej: [0x7E, 0x02, 0x01, 0x11, 0x37, 0xAB, 0xCD, 0x7E])
            if self.payload[-1] == 0x7E: # Verifica que la trama termine en 0x7E

                #Extrae cada campo de la trama seg√∫n el formato
                type = self.payload[1] # Extrae el tipo de dispositivo (0x0x1 para temperatura y 0x02 para la humedad)
                dispId = self.payload[2] # Obtiene el ID del dispositivo
                query = self.payload[3] # Guarda el c√≥digo de consulta (query)
                data = self.payload[4] # Obtiene el valor del sensor (p.Ej: 25¬∞C)
                crcHi = self.payload[5] # CRC: Parte alta del CRC (8 bits m√°s significativos)
                crcLo = self.payload[6] # CRC: Parte baja del CRC (8 bits menos significativos)
                crcGet = (crcHi << 8) | crcLo # Reconstruye el CRC recibido como un solo n√∫mero de 16 bits
                """
                crcHi << 8 -> mueve crcHi 8 bits a la izquierda
                | crcLo -> combina con la parte baja usando OR bit a bit
                """
                crcCalc = self.crc16CcittFalse(self.payload[1:5]) # Calcula CRC desde los 4 bytes centrales

                # Determinar tipo de dispositivo 0x01 para temperatura y 0x02 para humedad
                if type == 0x01:
                    typeStr = "01-temperatura" # Guarda descripci√≥n del sensor de temperatura
                    dataRead = f"temperatura: {data} ¬∞C" # Guarda un mensaje con un valor obtenido de temperatura (data=25)
                elif type == 0x02:
                    typeStr = "02-humedad" # Guarda descripci√≥n del sensor de humedad
                    dataRead = f"humedad relativa: {data} %" # Guarda un mensaje con un valor obtenido de humedad (data=55)
                else:
                    typeStr = f"{type:#04x}-desconocido" # Muestra un f-string con un valor hexadecimal del tipo de dispositivo para un dispositivo desconocido
                    dataRead = f"dato: {data}" # Muestra el dato que llego desde el dispositivo desconocido

                # Compara dos valores de CRC (recibido y calculado) si son iguales la trama es v√°lida, si no coinciden la trama tiene errores
                statusCrc = "ok ‚úÖ" if crcGet == crcCalc else f"incorrecto ‚ö†Ô∏è (esperado: {crcCalc:#06x})"

                # Muestra por pantalla un resumen completo y legible de una trama recibida desde el arduino
                print(f"üì¶ Dispositivo: {typeStr}, ID: {dispId:02d}, {dataRead}, checksum: {statusCrc}")

            else:
                print("‚ö†Ô∏è Trama inv√°lida (sin delimitador final).") # se ejecuta cuando el ultimo byte no es 0x7E (delimitador incorrecto)

            self.payload = []  # Limpia el buffer payload, para recibir una nueva trama

    def close(self): # M√©todo para cerrar el puerto serial si esta abierto
        if self.serial and self.serial.is_open: # Verifica que el objeto de conexi√≥n serial exista y que el puerto se encuentre abierto (ambas condiciones se deben cumplir)
            self.serial.close() # Cierra el puerto serial
            print("Puerto cerrado.") # Muestra por pantalla que el puerto se ha cerrado


# Programa Principal
if __name__ == "__main__":

    arduino = Ardu() # Se crea el objeto arduino a partir de la clase Ardu
    arduino.connect() # Se ejecuta el m√©todo connect

    """
    el m√©todo connect:

    1) Detecta el puerto serial autom√°ticamente con el m√©todo detectSerialPort(), si no lo encuentra, le pide al usuario que ingrese el puerto manualmente.
    2) Detecta la tasa de baudios autom√°ticamente con el m√©todo detectBaudRate() probando las velocidades m√°s comunes hasta encontrar una trama v√°lida con CRC correcto.
    3) Abre el puerto serial con el m√©todo open() y comienza la lectura de datos con readByte()

    CRC: Cyclic Redundancy Check (Verificaci√≥n de redundancia c√≠clica) es un algoritmo que se usa para detectar errores en datos que se env√≠an.
    
    p.Ej: el arduino env√≠a:

    0x7E: Inicio
    0x01: Sensor de temperatura
    0x01: ID del sensor
    0x11: C√≥digo de query
    0x19: Dato
    CRC_H, CRC_L: N√∫mero CRC que calcula el Arduino
    0x7E: Fin
    
    Antes de env√≠ar la trama el arduino calcula el CRC que depende de los datos del medio y ese n√∫mero se adjunta 
    en la trama, luego, este programa en python recalcula el mismo n√∫mero con los datos que recibio.

    Entonces, si el CRC coincide significa que los datos no fueron alterados y todo llego bien, por el contrario si el CRC NO coincide 
    significa que algunos datos cambiaron por un error en la transmisi√≥n.
    """